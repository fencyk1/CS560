binary	hex	mnemonic	operand	Description	Action	
000000	0	LD-AC	REF-ALL	Load AC	c(AC)=c(memory(effadd))	
000001	1	ST-AC	REF-ALL	Store AC	c(memory(effadd))=AC	
000010	2	LD-IR	REF-ALL	Load IR	c(IR)=c(memory(effadd))	
000011	3	ST-IR	REF-ALL	Store IR	c(memory(effadd))=IR	
000100	4	LD-AR	REF-ALL	Load AR	c(AR)=c(memory(effadd))	
000101	5	ST-AR	REF-ALL	Store AR	c(memory(effadd))=AR	
000110	6	LD-BR	*	Load BR	c(BR)=current memory address Must immediately follow a Using	
000111	7	ST-BR	REF-ALL	Store BR	c(memory(effadd))=BR   dangerous instruction	
001000	8	ADD-AC	REF-ALL	Add Accumulator	c(AC)=c(AC)+c(mem(effadd))	
001001	9	SUB-AC	REF-ALL	Subtract AC	c(AC)=c(AC)-c(mem(effadd))	
001010	A	MUL-AC	REF-ALL	Multiply AC	c(AC)=c(AC)*c(mem(effadd))	
001011	B	DIV-AC	REF-ALL	Divide AC	c(AC)=c(AC)/c(mem(effadd))	
001100	C	ADD-IR	REF-ALL	Add Index Register	c(IR)=c(IR)+c(mem(effadd))	
001101	D	SUB-IR	REF-ALL	Subtract Index Register	c(IR)=c(IR)-c(mem(effadd))	
001110	E	MUL-IR	REF-ALL	Multiply Index Register	c(IR)=c(IR)*c(mem(effadd))	
001111	F	DIV-IR	REF-ALL	Divide Index Register	c(IR)=c(IR)/c(mem(effadd))	
010000	10	AND-AC	REF-ALL	AND Accumulator	c(AC)=c(AC) AND c(mem(effadd))	
010001	11	OR-AC	REF-ALL	OR Accumulator	c(AC)=c(AC) OR c(mem(effadd))	
010010	12	LAND-AC	REF-ALL	Logical AND	c(AC)=c(AC) AND c(mem(effadd))	
010011	13	LOR-AC	REF-ALL	Logial OR	c(AC)=c(AC) OR c(mem(effadd))	
010100	14	ABS-AC	REF-ALL	Absolute the Accumulator	c(AC)=|c(AC)|	
010101	15	AND-IR	REF-ALL	AND Index Register	c(IR)=c(IR) AND c(mem(effadd))	
010110	16	OR-IR	REF-ALL	OR Index Register	c(IR)=c(IR) OR c(mem(effadd))	
010111	17	LAND-IR	REF-ALL	AND Index Register	c(IR)=c(IR) AND c(mem(effadd))	
011000	18	LOR-IR	REF-ALL	OR Index Register	c(IR)=c(IR) OR c(mem(effadd))	
011001	19	AND-SR	REF-ALL	AND Status Register	c(SR)=c(SR) AND c(mem(effadd))	
011010	1A	OR-SR	REF-ALL	OR Status Register	c(SR)=c(SR) OR c(mem(effadd))	
011011	1B	ABS-IR	none	Absolute the Index Register	c(IR)=|c(IR)|	
011100	1C	SLA-AC	type 4	Shift Left Arithemtic Accumulator 	c(AC)=c(AC)  [Shifted Left] effadd	
011101	1D	SRA-AC	type 4	Shift Right Arithemtic Accumulator	c(AC)=c(AC) [Right Shifted] effadd	
011110	1E	SLL-AC	type 4	Shift Left Logical Accumulator 	c(AC)=c(AC)  [Shifted Left] effadd	
011111	1F	SRL-AC	type 4	Shift Right Logical Accumulator	c(AC)=c(AC) [Right Shifted] effadd	
100000	20	RROT-AC	type 4	Right Rotate bitwise	c(AC)=c(AC) [Right rotated] effadd	
100001	21	LROT-AC	type 4	Left Rotate bitwise	c(AC)=c(AC) [left rotated] effadd	
100010	22	SLA-IR	type 4	Shift Left Arithmetic Index Register	c(IR)=c(IR)  [Shifted Left] effadd	
100011	23	SRA-IR	type 4	Shift Right Arithmetic Index Register	c(IR)=c(IR) [Right Shifted] effadd	
100100	24	SLL-IR	type 4	Shift Left Arithmetic Index Register	c(IR)=c(IR)  [Shifted Left] effadd	
100101	25	SRL-IR	type 4	Shift Right Arithmetic Index Register	c(IR)=c(IR) [Right Shifted] effadd	
100110	26	RROT-IR	type 4	Right Rotate bitwise	c(IR)=c(IR) [Right rotated] effadd	
100111	27	LROT-IR	type 4	Left Rotate bitwise	c(IR)=c(IR) [left rotated] effadd	
101000	28	LDN-AC	REF-ALL	Load (-1)*AC	c(-AC)=c(memory(effadd))	
101001	29	None	currently unused	currently unused	currently unused	
101010	2A	HALT	type 3		currently unused	currently unused	
101011	2B	None	currently unused	currently unused	currently unused		
101100	2C	JMP-PR-LT	REF-ALL	Jump if Status < 0	If c(PR)<0 LC=effadd	
101101	2D	JMP-SR-GT	REF-ALL	Jump if Status > 0	If c(SR)>0 LC=effadd	
101110	2E	JMP-SR-EQ	REF-ALL	Jump if Status = 0	If c(SR)=0 LC=effadd	
101111	2F	JMP-SR-LT	REF-ALL	Jump if Status < 0	If c(SR)<0 LC=effadd	
110000	30	JMP	REF-ALL	Jump to location	LC=effadd	
110001	31	JMP-AC-GT	REF-ALL	Jump if AC >	If c(AC)>0 LC=effadd	
110010	32	JMP-AC-EQ	REF-ALL	Jump if AC =	If c(AC)=0 LC=effadd	
110011	33	JMP-AC-LT	reference	Jump if AC <	If c(AC)<0 LC=effadd	
110100	34	JMP-IR-GT	reference	Jump if IR >	If c(IR)>0 LC=effadd	
110101	35	JMP-IR-EQ	reference	Jump if IR =	If c(IR)=0 LC=effadd	
110110	36	JMP-IR-LT	reference	Jump if IR <	If c(IR)<0 LC=effadd	
110111	37	DISPLAY	type 3	if 0 Display All registers,if 1 Display LC and c(mem(LC)), if 2 Display active memory locations in a matrix format	See Description.	
111000	38	READ-NUM	REF-ALL	Read number from keybord	Store results into c(memory(effadd))	
111001	39	READ-STR	REF-ALL	Read string from keybord place starting in reference	Store results into c(memory(effadd))	
111010	3A	WRITE-NUM	REF-ALL	Write number from memory reference	"""WRITE"" from c(memory(effadd))"	
111011	3B	WRITE-STR	REF-ALL	Write string (2) from memory reference	"""WRITE"" from c(memory(effadd))"	
111100	3C	LD-AC-ADR	REF-ALL	Load AC with address	c(AC)=effadd	
111101	3D	LD-IR-ADR	REF-ALL	Load IR with address	c(IR)=effadd	
111110	3E	LD-BR-ADR	*	Load BR with address	c(BR)=effadd	
111111	3F	LD-PR	REF-ALL	Missing Description	c(PR)=c(memory(effadd))